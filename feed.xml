<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://prulloac.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://prulloac.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-09-19T16:05:06+00:00</updated><id>https://prulloac.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Containers</title><link href="https://prulloac.github.io/blog/2023/containerization/" rel="alternate" type="text/html" title="Containers"/><published>2023-07-17T13:00:00+00:00</published><updated>2023-07-17T13:00:00+00:00</updated><id>https://prulloac.github.io/blog/2023/containerization</id><content type="html" xml:base="https://prulloac.github.io/blog/2023/containerization/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>Containers provide a lightweight and efficient way to package and deploy applications, offering isolation, portability, and scalability. They are an essential component of modern DevOps practices.</p> <hr/> <h2 id="table-of-contents">Table of Contents</h2> <ul> <li><a href="#problem-to-solve">Problem to solve</a></li> <li><a href="#solution">Solution</a></li> <li><a href="#architecture-components">Architecture Components</a></li> <li><a href="#containers-vs-virtual-machines">Containers vs Virtual Machines</a></li> <li><a href="#containerization">Containerization</a></li> <li><a href="#additional-resources">Additional resources</a></li> </ul> <hr/> <h2 id="problem-to-solve">Problem to solve</h2> <p>In modern software development and deployment, we face several challenges, including:</p> <ul> <li> <p><strong>Dependency Management:</strong> Ensuring that applications have the required dependencies, libraries, and configurations can be cumbersome and error-prone.</p> </li> <li> <p><strong>Portability:</strong> Deploying applications consistently across different environments (development, testing, production) can be challenging.</p> </li> <li> <p><strong>Resource Efficiency:</strong> Traditional virtual machines (VMs) often consume more resources than necessary, leading to inefficiencies and increased infrastructure costs.</p> </li> <li> <p><strong>Scaling:</strong> Scaling applications up or down quickly to meet varying workloads can be complex and time-consuming.</p> </li> </ul> <hr/> <h2 id="solution">Solution</h2> <p>Containers address these challenges by encapsulating applications and their dependencies into a single, lightweight unit. Key benefits of containers include:</p> <ul> <li> <p><strong>Isolation:</strong> Containers provide process and file system isolation, ensuring that applications do not interfere with each other, enhancing security and stability.</p> </li> <li> <p><strong>Portability:</strong> Containers package everything an application needs to run, making it easy to move and deploy applications consistently across different environments.</p> </li> <li> <p><strong>Resource Efficiency:</strong> Containers share the host OS kernel, reducing overhead and making them highly resource-efficient compared to VMs.</p> </li> <li> <p><strong>Scalability:</strong> Containerized applications can be easily scaled up or down, responding dynamically to changes in demand.</p> </li> </ul> <hr/> <h2 id="containers-vs-virtual-machines">Containers vs Virtual Machines</h2> <p><img src="img/containers-vs-vm.png" alt="Containers opposed to VMs"/></p> <p>Containers and virtual machines (VMs) serve similar purposes but differ in several ways:</p> <ul> <li> <p><strong>Resource Overhead:</strong> VMs include an entire OS, resulting in higher resource overhead. Containers share the host OS kernel, making them more lightweight.</p> </li> <li> <p><strong>Isolation:</strong> VMs provide strong isolation with separate OS instances. Containers offer process and file system isolation but share the host OS.</p> </li> <li> <p><strong>Startup Time:</strong> Containers start quickly, in seconds, while VMs typically take minutes to boot.</p> </li> <li> <p><strong>Resource Utilization:</strong> Containers are more resource-efficient, enabling higher density on the same hardware.</p> </li> <li> <p><strong>Portability:</strong> Containers are more portable due to their smaller size and consistent runtime environment.</p> </li> </ul> <hr/> <h2 id="architecture-components">Architecture Components</h2> <p>Container architecture typically consists of the following components:</p> <ul> <li> <p><strong>Container Engine:</strong> Responsible for running containers on a host system. Docker and containerd are popular container engines.</p> </li> <li> <p><strong>Images:</strong> Immutable templates that define the application, its dependencies, and runtime settings. Images are used to create containers.</p> </li> <li> <p><strong>Containers:</strong> Runnable instances of images. Containers execute in isolated user spaces and share the host OS kernel.</p> </li> <li> <p><strong>Orchestration Tools:</strong> Kubernetes, Docker Swarm, and others help manage containerized applications, handle scaling, load balancing, and ensure high availability.</p> </li> </ul> <hr/> <h2 id="containerization">Containerization</h2> <p>Containerization involves the process of packaging an application and its dependencies into containers. Key steps in containerization include:</p> <ol> <li> <p><strong>Select a Base Image:</strong> Choose a base image that suits your application’s runtime environment, such as Alpine Linux or Ubuntu.</p> </li> <li> <p><strong>Write a Dockerfile:</strong> Create a Dockerfile specifying the application’s configuration, dependencies, and build steps.</p> </li> <li> <p><strong>Build an Image:</strong> Use the Dockerfile to build an image that encapsulates the application.</p> </li> <li> <p><strong>Run Containers:</strong> Deploy containers from the image, specifying runtime parameters and environment variables.</p> </li> <li> <p><strong>Orchestration:</strong> Use orchestration tools like Kubernetes to manage and scale containers in a production environment.</p> </li> </ol> <hr/> <h2 id="additional-resources">Additional resources</h2> <ul> <li><a href="https://docs.docker.com/">Docker Documentation</a></li> <li><a href="https://kubernetes.io/docs/home/">Kubernetes Documentation</a></li> <li><a href="https://cloud.google.com/architecture/best-practices-for-building-containers">Containerization Best Practices</a></li> <li><a href="https://cloudberry.engineering/article/container-security-best-practices/">Container Security Best Practices</a></li> <li><a href="https://rancher.com/blog/2020/container-orchestration-comparison-kubernetes-vs-docker-swarm-vs-apache-mesos/">Container Orchestration Comparison</a></li> <li><a href="https://dockerlabs.collabnix.com/beginners/difference-docker-vm.html">Difference Between VM vs Docker</a></li> </ul> <p>These resources provide in-depth information on containerization, container orchestration, and best practices for working with containers in DevOps environments.</p>]]></content><author><name></name></author><category term="tech-guides"/><category term="devops-guides"/><category term="devops"/><category term="containers"/><summary type="html"><![CDATA[A brief introduction to containers and containerization.]]></summary></entry><entry><title type="html">Abstracción: El primer paso a los algoritmos</title><link href="https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos/" rel="alternate" type="text/html" title="Abstracción: El primer paso a los algoritmos"/><published>2020-07-09T21:51:27+00:00</published><updated>2020-07-09T21:51:27+00:00</updated><id>https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos</id><content type="html" xml:base="https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Javascript con sabor a ES6: Spread Operator, Rest Parameters y Object Destructuring</title><link href="https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring/" rel="alternate" type="text/html" title="Javascript con sabor a ES6: Spread Operator, Rest Parameters y Object Destructuring"/><published>2018-12-31T13:33:36+00:00</published><updated>2018-12-31T13:33:36+00:00</updated><id>https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">React: Fetch API vs AXIOS</title><link href="https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios/" rel="alternate" type="text/html" title="React: Fetch API vs AXIOS"/><published>2018-11-24T02:09:54+00:00</published><updated>2018-11-24T02:09:54+00:00</updated><id>https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">React: Descubriendo Componentes</title><link href="https://prulloac.github.io/blog/2018/react-descubriendo-componentes/" rel="alternate" type="text/html" title="React: Descubriendo Componentes"/><published>2018-11-18T17:48:28+00:00</published><updated>2018-11-18T17:48:28+00:00</updated><id>https://prulloac.github.io/blog/2018/react-descubriendo-componentes</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/react-descubriendo-componentes/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Software en equipo: Git — stash</title><link href="https://prulloac.github.io/blog/2018/software-en-equipo-gitstash/" rel="alternate" type="text/html" title="Software en equipo: Git — stash"/><published>2018-11-17T17:48:03+00:00</published><updated>2018-11-17T17:48:03+00:00</updated><id>https://prulloac.github.io/blog/2018/software-en-equipo-gitstash</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/software-en-equipo-gitstash/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Software en equipo: Git — más allá de un simple commit</title><link href="https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit/" rel="alternate" type="text/html" title="Software en equipo: Git — más allá de un simple commit"/><published>2018-09-27T01:35:23+00:00</published><updated>2018-09-27T01:35:23+00:00</updated><id>https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Programación orientada a objetos: Patrón Builder</title><link href="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder/" rel="alternate" type="text/html" title="Programación orientada a objetos: Patrón Builder"/><published>2018-09-19T20:01:31+00:00</published><updated>2018-09-19T20:01:31+00:00</updated><id>https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Programación orientada a objetos: Patrón Singleton</title><link href="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-singleton/" rel="alternate" type="text/html" title="Programación orientada a objetos: Patrón Singleton"/><published>2018-09-17T17:38:59+00:00</published><updated>2018-09-17T17:38:59+00:00</updated><id>https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-singleton</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-singleton/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Programación orientada a objetos: Principios SOLID</title><link href="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-principios-solid/" rel="alternate" type="text/html" title="Programación orientada a objetos: Principios SOLID"/><published>2018-09-15T22:39:51+00:00</published><updated>2018-09-15T22:39:51+00:00</updated><id>https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-principios-solid</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-principios-solid/"><![CDATA[]]></content><author><name></name></author></entry></feed>