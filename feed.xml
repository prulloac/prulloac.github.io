<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://prulloac.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://prulloac.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-20T09:04:30+00:00</updated><id>https://prulloac.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Container Orchestration</title><link href="https://prulloac.github.io/blog/2023/container-orchestration/" rel="alternate" type="text/html" title="Container Orchestration"/><published>2023-09-19T13:00:00+00:00</published><updated>2023-09-19T13:00:00+00:00</updated><id>https://prulloac.github.io/blog/2023/container-orchestration</id><content type="html" xml:base="https://prulloac.github.io/blog/2023/container-orchestration/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>Container orchestration tools automate the deployment, scaling, and management of containerized applications, improving reliability and efficiency in a DevOps environment.</p> <h2 id="table-of-contents">Table of Contents</h2> <ul> <li><a href="#problem-to-solve">Problem to solve</a></li> <li><a href="#solution">Solution</a></li> <li><a href="#container-orchestration-tools">Container Orchestration tools</a></li> <li><a href="#additional-resources">Additional resources</a></li> </ul> <h2 id="problem-to-solve">Problem to solve</h2> <p>As containerized applications become more complex and are deployed at scale, several challenges arise:</p> <ul> <li> <p><strong>Deployment Complexity:</strong> Manually deploying and managing a large number of containers across multiple hosts is time-consuming and error-prone.</p> </li> <li> <p><strong>Scaling:</strong> Scaling containers horizontally to handle varying workloads efficiently is challenging without automation.</p> </li> <li> <p><strong>High Availability:</strong> Ensuring that applications remain available and responsive, even in the face of failures, requires complex configurations.</p> </li> <li> <p><strong>Resource Optimization:</strong> Optimizing resource utilization and load balancing across containers is critical for cost efficiency.</p> </li> </ul> <h2 id="solution">Solution</h2> <p>Container orchestration tools address these challenges by automating the management of containerized applications. Key benefits include:</p> <ul> <li> <p><strong>Automated Deployment:</strong> Orchestration tools automate the deployment and scaling of containers, reducing manual effort and errors.</p> </li> <li> <p><strong>High Availability:</strong> They ensure that applications remain available by distributing containers across multiple hosts and handling failures.</p> </li> <li> <p><strong>Resource Management:</strong> Orchestration tools optimize resource allocation and load balancing for improved efficiency.</p> </li> <li> <p><strong>Rolling Updates:</strong> They enable seamless updates and rollbacks of application versions.</p> </li> </ul> <h2 id="container-orchestration-tools">Container Orchestration tools</h2> <p>Several container orchestration tools are available, catering to different needs and environments. Some prominent options include:</p> <ul> <li> <p><strong>Kubernetes:</strong> An open-source platform widely adopted for its robust features and extensive ecosystem. Offered by cloud providers like Google Cloud Platform (GCP), Amazon Web Services (AWS), and Microsoft Azure.</p> </li> <li> <p><strong>Amazon Elastic Kubernetes Service (EKS):</strong> A managed Kubernetes service by AWS that simplifies cluster management.</p> </li> <li> <p><strong>Google Kubernetes Engine (GKE):</strong> A managed Kubernetes service by GCP, offering deep integration with Google Cloud services.</p> </li> <li> <p><strong>Azure Kubernetes Service (AKS):</strong> A managed Kubernetes service by Azure, providing seamless integration with Azureâ€™s infrastructure and services.</p> </li> <li> <p><strong>Docker Swarm:</strong> A lightweight, built-in orchestration solution for Docker that is easy to set up and manage.</p> </li> <li> <p><strong>HashiCorp Nomad:</strong> A lightweight, flexible orchestration tool suitable for smaller environments or scenarios with diverse application types.</p> </li> <li> <p><strong>Apache Mesos:</strong> A distributed systems kernel that can manage various types of workloads, including containers, through frameworks like Marathon and Kubernetes.</p> </li> <li> <p><strong>Rancher:</strong> A platform-agnostic orchestration tool that simplifies Kubernetes management and provides centralized cluster management.</p> </li> <li> <p><strong>OpenShift:</strong> A Kubernetes-based container platform by Red Hat that includes additional enterprise features and support.</p> </li> </ul> <p>The choice of orchestration tool depends on factors such as complexity, scalability, and integration with existing infrastructure.</p> <h2 id="additional-resources">Additional resources</h2> <ul> <li><a href="https://kubernetes.io/docs/home/">Kubernetes Official Documentation</a></li> <li><a href="https://docs.aws.amazon.com/eks/">AWS EKS Documentation</a></li> <li><a href="https://cloud.google.com/kubernetes-engine/docs">GCP GKE Documentation</a></li> <li><a href="https://docs.microsoft.com/en-us/azure/aks/">Azure AKS Documentation</a></li> <li><a href="https://docs.docker.com/engine/swarm/">Docker Swarm Official Documentation</a></li> <li><a href="https://learn.hashicorp.com/tutorials/nomad/get-started-index">HashiCorp Nomad Documentation</a></li> <li><a href="http://mesos.apache.org/documentation/latest/">Apache Mesos Documentation</a></li> <li><a href="https://rancher.com/docs/rancher/v2.x/en/">Rancher Documentation</a></li> <li><a href="https://docs.openshift.com/container-platform/4.8/welcome/index.html">OpenShift Documentation</a></li> </ul> <p>Explore these resources to gain a deeper understanding of container orchestration tools and how to use them effectively in your DevOps workflows.</p>]]></content><author><name></name></author><category term="tech-guides"/><category term="devops-guides"/><category term="devops"/><category term="containers"/><summary type="html"><![CDATA[A brief introduction to container orchestration.]]></summary></entry><entry><title type="html">Docker</title><link href="https://prulloac.github.io/blog/2023/docker/" rel="alternate" type="text/html" title="Docker"/><published>2023-09-19T13:00:00+00:00</published><updated>2023-09-19T13:00:00+00:00</updated><id>https://prulloac.github.io/blog/2023/docker</id><content type="html" xml:base="https://prulloac.github.io/blog/2023/docker/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>Docker is a containerization platform that simplifies application packaging, deployment, and scaling, enhancing DevOps practices.</p> <h2 id="table-of-contents">Table of Contents</h2> <ul> <li><a href="#docker-engine">Docker Engine</a></li> <li><a href="#docker-images">Docker Images</a></li> <li><a href="#docker-containers">Docker Containers</a></li> <li><a href="#dockerfiles">Dockerfiles</a></li> <li><a href="#docker-registry">Docker Registry</a></li> <li><a href="#additional-resources">Additional resources</a></li> </ul> <h2 id="docker-engine">Docker Engine</h2> <p>Docker Engine is the core component of the Docker platform. It consists of:</p> <ul> <li> <p><strong>Docker Daemon:</strong> A background service responsible for building, running, and managing containers on a host system.</p> </li> <li> <p><strong>Docker CLI:</strong> A command-line interface that allows users to interact with the Docker Daemon to create, manage, and inspect containers.</p> </li> <li> <p><strong>REST API:</strong> Docker provides a REST API that allows developers to control Docker using HTTP requests.</p> </li> </ul> <p>Docker Engine is available for various operating systems, including Linux, Windows, and macOS.</p> <h2 id="docker-images">Docker Images</h2> <p>Docker Images are read-only templates used to create Docker Containers. Key points about Docker Images:</p> <ul> <li> <p>Images contain the application, its dependencies, and configuration.</p> </li> <li> <p>They are built from a set of instructions defined in a Dockerfile.</p> </li> <li> <p>Images are stored in a Docker Registry and can be versioned.</p> </li> </ul> <h2 id="docker-containers">Docker Containers</h2> <p>Docker Containers are runnable instances of Docker Images. Here are some important aspects of containers:</p> <ul> <li> <p>Containers are isolated environments that share the host OS kernel.</p> </li> <li> <p>They can start quickly and consume fewer resources compared to traditional VMs.</p> </li> <li> <p>Containers are ephemeral, making it easy to scale applications up or down.</p> </li> <li> <p>Docker Compose is used to define and manage multi-container applications.</p> </li> </ul> <h2 id="dockerfiles">Dockerfiles</h2> <p>Dockerfiles are configuration files that define the instructions to build a Docker Image. Key considerations when working with Dockerfiles:</p> <ul> <li> <p>They specify a base image, application code, dependencies, and runtime settings.</p> </li> <li> <p>Dockerfiles enable version control and repeatability in image creation.</p> </li> <li> <p>Properly optimized Dockerfiles can result in smaller and more secure images.</p> </li> </ul> <h2 id="docker-registry">Docker Registry</h2> <p>A Docker Registry is a repository for storing and sharing Docker Images. Notable aspects of Docker Registries include:</p> <ul> <li> <p>Docker Hub is the default public registry, housing numerous publicly available images.</p> </li> <li> <p>Organizations can set up private Docker Registries for secure image storage.</p> </li> <li> <p>Popular cloud providers, such as AWS, GCP, and Azure, offer managed container registries.</p> </li> <li> <p>Images can be tagged, versioned, and organized within registries.</p> </li> </ul> <h2 id="additional-resources">Additional resources</h2> <ul> <li><a href="https://docs.docker.com/">Docker Official Documentation</a></li> <li><a href="https://hub.docker.com/">Docker Hub</a></li> <li><a href="https://docs.docker.com/compose/">Docker Compose Documentation</a></li> <li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best Practices for Writing Dockerfiles</a></li> <li><a href="https://www.docker.com/blog/security-best-practices-for-building-docker-images/">Docker Security Best Practices</a></li> <li><a href="https://aws.amazon.com/ecr/">Docker Registry on AWS</a></li> <li><a href="https://cloud.google.com/container-registry">Docker Registry on GCP</a></li> <li><a href="https://azure.microsoft.com/en-us/services/container-registry/">Docker Registry on Azure</a></li> </ul> <p>Explore these resources to master Docker, containerization, and image management in your DevOps workflows.</p>]]></content><author><name></name></author><category term="tech-guides"/><category term="devops-guides"/><category term="devops"/><category term="containers"/><summary type="html"><![CDATA[A brief introduction to Docker containerization.]]></summary></entry><entry><title type="html">Containers</title><link href="https://prulloac.github.io/blog/2023/containerization/" rel="alternate" type="text/html" title="Containers"/><published>2023-09-17T13:00:00+00:00</published><updated>2023-09-17T13:00:00+00:00</updated><id>https://prulloac.github.io/blog/2023/containerization</id><content type="html" xml:base="https://prulloac.github.io/blog/2023/containerization/"><![CDATA[<h2 id="tldr">TL;DR</h2> <p>Containers provide a lightweight and efficient way to package and deploy applications, offering isolation, portability, and scalability. They are an essential component of modern DevOps practices.</p> <hr/> <h2 id="table-of-contents">Table of Contents</h2> <ul> <li><a href="#problem-to-solve">Problem to solve</a></li> <li><a href="#solution">Solution</a></li> <li><a href="#architecture-components">Architecture Components</a></li> <li><a href="#containers-vs-virtual-machines">Containers vs Virtual Machines</a></li> <li><a href="#containerization">Containerization</a></li> <li><a href="#additional-resources">Additional resources</a></li> </ul> <hr/> <h2 id="problem-to-solve">Problem to solve</h2> <p>In modern software development and deployment, we face several challenges, including:</p> <ul> <li> <p><strong>Dependency Management:</strong> Ensuring that applications have the required dependencies, libraries, and configurations can be cumbersome and error-prone.</p> </li> <li> <p><strong>Portability:</strong> Deploying applications consistently across different environments (development, testing, production) can be challenging.</p> </li> <li> <p><strong>Resource Efficiency:</strong> Traditional virtual machines (VMs) often consume more resources than necessary, leading to inefficiencies and increased infrastructure costs.</p> </li> <li> <p><strong>Scaling:</strong> Scaling applications up or down quickly to meet varying workloads can be complex and time-consuming.</p> </li> </ul> <hr/> <h2 id="solution">Solution</h2> <p>Containers address these challenges by encapsulating applications and their dependencies into a single, lightweight unit. Key benefits of containers include:</p> <ul> <li> <p><strong>Isolation:</strong> Containers provide process and file system isolation, ensuring that applications do not interfere with each other, enhancing security and stability.</p> </li> <li> <p><strong>Portability:</strong> Containers package everything an application needs to run, making it easy to move and deploy applications consistently across different environments.</p> </li> <li> <p><strong>Resource Efficiency:</strong> Containers share the host OS kernel, reducing overhead and making them highly resource-efficient compared to VMs.</p> </li> <li> <p><strong>Scalability:</strong> Containerized applications can be easily scaled up or down, responding dynamically to changes in demand.</p> </li> </ul> <hr/> <h2 id="containers-vs-virtual-machines">Containers vs Virtual Machines</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/_blog/containers/containers-vs-vm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/_blog/containers/containers-vs-vm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/_blog/containers/containers-vs-vm-1400.webp"/> <source class="responsive-img-srcset" media="(max-width: 2800px)" srcset="/assets/img/_blog/containers/containers-vs-vm-2800.webp"/> <img src="/assets/img/_blog/containers/containers-vs-vm-2800.webp" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Containers and virtual machines (VMs) serve similar purposes but differ in several ways:</p> <ul> <li> <p><strong>Resource Overhead:</strong> VMs include an entire OS, resulting in higher resource overhead. Containers share the host OS kernel, making them more lightweight.</p> </li> <li> <p><strong>Isolation:</strong> VMs provide strong isolation with separate OS instances. Containers offer process and file system isolation but share the host OS.</p> </li> <li> <p><strong>Startup Time:</strong> Containers start quickly, in seconds, while VMs typically take minutes to boot.</p> </li> <li> <p><strong>Resource Utilization:</strong> Containers are more resource-efficient, enabling higher density on the same hardware.</p> </li> <li> <p><strong>Portability:</strong> Containers are more portable due to their smaller size and consistent runtime environment.</p> </li> </ul> <hr/> <h2 id="architecture-components">Architecture Components</h2> <p>Container architecture typically consists of the following components:</p> <ul> <li> <p><strong>Container Engine:</strong> Responsible for running containers on a host system. Docker and containerd are popular container engines.</p> </li> <li> <p><strong>Images:</strong> Immutable templates that define the application, its dependencies, and runtime settings. Images are used to create containers.</p> </li> <li> <p><strong>Containers:</strong> Runnable instances of images. Containers execute in isolated user spaces and share the host OS kernel.</p> </li> <li> <p><strong>Orchestration Tools:</strong> Kubernetes, Docker Swarm, and others help manage containerized applications, handle scaling, load balancing, and ensure high availability.</p> </li> </ul> <hr/> <h2 id="containerization">Containerization</h2> <p>Containerization involves the process of packaging an application and its dependencies into containers. Key steps in containerization include:</p> <ol> <li> <p><strong>Select a Base Image:</strong> Choose a base image that suits your applicationâ€™s runtime environment, such as Alpine Linux or Ubuntu.</p> </li> <li> <p><strong>Write a Dockerfile:</strong> Create a Dockerfile specifying the applicationâ€™s configuration, dependencies, and build steps.</p> </li> <li> <p><strong>Build an Image:</strong> Use the Dockerfile to build an image that encapsulates the application.</p> </li> <li> <p><strong>Run Containers:</strong> Deploy containers from the image, specifying runtime parameters and environment variables.</p> </li> <li> <p><strong>Orchestration:</strong> Use orchestration tools like Kubernetes to manage and scale containers in a production environment.</p> </li> </ol> <hr/> <h2 id="additional-resources">Additional resources</h2> <ul> <li><a href="https://docs.docker.com/">Docker Documentation</a></li> <li><a href="https://kubernetes.io/docs/home/">Kubernetes Documentation</a></li> <li><a href="https://cloud.google.com/architecture/best-practices-for-building-containers">Containerization Best Practices</a></li> <li><a href="https://cloudberry.engineering/article/container-security-best-practices/">Container Security Best Practices</a></li> <li><a href="https://rancher.com/blog/2020/container-orchestration-comparison-kubernetes-vs-docker-swarm-vs-apache-mesos/">Container Orchestration Comparison</a></li> <li><a href="https://dockerlabs.collabnix.com/beginners/difference-docker-vm.html">Difference Between VM vs Docker</a></li> </ul> <p>These resources provide in-depth information on containerization, container orchestration, and best practices for working with containers in DevOps environments.</p>]]></content><author><name></name></author><category term="tech-guides"/><category term="devops-guides"/><category term="devops"/><category term="containers"/><summary type="html"><![CDATA[A brief introduction to containers and containerization.]]></summary></entry><entry><title type="html">AbstracciÃ³n: El primer paso a los algoritmos</title><link href="https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos/" rel="alternate" type="text/html" title="AbstracciÃ³n: El primer paso a los algoritmos"/><published>2020-07-09T21:51:27+00:00</published><updated>2020-07-09T21:51:27+00:00</updated><id>https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos</id><content type="html" xml:base="https://prulloac.github.io/blog/2020/abstraccin-el-primer-paso-a-los-algoritmos/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Javascript con sabor a ES6: Spread Operator, Rest Parameters y Object Destructuring</title><link href="https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring/" rel="alternate" type="text/html" title="Javascript con sabor a ES6: Spread Operator, Rest Parameters y Object Destructuring"/><published>2018-12-31T13:33:36+00:00</published><updated>2018-12-31T13:33:36+00:00</updated><id>https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/javascript-con-sabor-a-es6-spread-operator-rest-parameters-y-object-destructuring/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">React: Fetch API vs AXIOS</title><link href="https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios/" rel="alternate" type="text/html" title="React: Fetch API vs AXIOS"/><published>2018-11-24T02:09:54+00:00</published><updated>2018-11-24T02:09:54+00:00</updated><id>https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/react-fetch-api-vs-axios/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">React: Descubriendo Componentes</title><link href="https://prulloac.github.io/blog/2018/react-descubriendo-componentes/" rel="alternate" type="text/html" title="React: Descubriendo Componentes"/><published>2018-11-18T17:48:28+00:00</published><updated>2018-11-18T17:48:28+00:00</updated><id>https://prulloac.github.io/blog/2018/react-descubriendo-componentes</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/react-descubriendo-componentes/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Software en equipo: Gitâ€Šâ€”â€Šstash</title><link href="https://prulloac.github.io/blog/2018/software-en-equipo-gitstash/" rel="alternate" type="text/html" title="Software en equipo: Gitâ€Šâ€”â€Šstash"/><published>2018-11-17T17:48:03+00:00</published><updated>2018-11-17T17:48:03+00:00</updated><id>https://prulloac.github.io/blog/2018/software-en-equipo-gitstash</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/software-en-equipo-gitstash/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Software en equipo: Gitâ€Šâ€”â€ŠmÃ¡s allÃ¡ de un simple commit</title><link href="https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit/" rel="alternate" type="text/html" title="Software en equipo: Gitâ€Šâ€”â€ŠmÃ¡s allÃ¡ de un simple commit"/><published>2018-09-27T01:35:23+00:00</published><updated>2018-09-27T01:35:23+00:00</updated><id>https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/software-en-equipo-gitms-all-de-un-simple-commit/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">ProgramaciÃ³n orientada a objetos: PatrÃ³n Builder</title><link href="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder/" rel="alternate" type="text/html" title="ProgramaciÃ³n orientada a objetos: PatrÃ³n Builder"/><published>2018-09-19T20:01:31+00:00</published><updated>2018-09-19T20:01:31+00:00</updated><id>https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder</id><content type="html" xml:base="https://prulloac.github.io/blog/2018/programacin-orientada-a-objetos-patrn-builder/"><![CDATA[]]></content><author><name></name></author></entry></feed>